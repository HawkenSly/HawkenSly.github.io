{"version":3,"sources":["doughnut.js","pangostats.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["doughnut","state","loading","pieData","fetch","response","json","data","this","setState","labels","datasets","win","lose","backgroundColor","hoverBackgroundColor","React","Component","pango","pangoList","console","log","Dotawinloss","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6PAGqBA,E,2MAInBC,MAAQ,CACJC,SAAS,EACTC,QAAS,I,yMAKC,oD,SACWC,MADX,qD,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SACH,CAACN,QAAU,CACXO,OAAQ,CACR,OACA,UAEFC,SAAU,CAAC,CACTJ,KAAM,CAACA,EAAKK,IAAKL,EAAKM,MACtBC,gBAAiB,CACjB,UACA,WAEAC,qBAAsB,CACtB,UACA,gBAGFP,KAAKC,SAAS,CAACP,SAAS,I,mIAIxB,OACE,6BACE,gDACCM,KAAKP,MAAMC,QAAU,2CAAwB,6BAAK,kBAAC,IAAD,CAAUK,KAAMC,KAAKP,MAAME,gB,GAtChDa,IAAMC,WCDvBC,E,2MAGjBjB,MAAQ,CACJC,SAAS,EACTiB,UAAW,I,yMAIH,kD,SACWf,MADX,mD,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNa,QAAQC,IAAId,GACZC,KAAKC,SAAS,CAACP,SAAS,I,mIAMpB,OACE,6BACE,oCACCM,KAAKP,MAAMC,QAAU,2CAAwB,6BAAK,sC,GAtB5Bc,IAAMC,WC2BpBK,E,iLAejB,OAAO,6BACL,yBAAKC,UAAU,OACf,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,oCAKA,6BACJ,kBAAC,EAAD,MACI,6BACA,kBAAC,EAAD,MACA,mC,GA5BiCV,IAAMC,WCjB3BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCcNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,mBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.fc191228.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Doughnut} from 'react-chartjs-2';\r\n\r\nexport default class doughnut extends React.Component {\r\n  displayName: 'DoughnutExample';\r\n\r\n\r\n  state = {\r\n      loading: true,\r\n      pieData: {\r\n      }\r\n    }\r\n\r\n  async componentDidMount() {\r\n    const url = \"https://api.opendota.com/api/players/110767531/wl\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    this.setState(\r\n      {pieData : {\r\n      labels: [\r\n      'Wins',\r\n      'Losses',\r\n    ],\r\n    datasets: [{\r\n      data: [data.win, data.lose],\r\n      backgroundColor: [\r\n      '#FF6384',\r\n      '#36A2EB',\r\n      ],\r\n      hoverBackgroundColor: [\r\n      '#FF6384',\r\n      '#36A2EB',\r\n      ]\r\n    }]}});\r\n    this.setState({loading: false});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Doughnut Example</h2>\r\n        {this.state.loading ? <div>loading...</div> : <div><Doughnut data={this.state.pieData} /></div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default class pango extends React.Component {\r\n    displayName: 'PangoStatsComponent';\r\n\r\n    state = {\r\n        loading: true,\r\n        pangoList: {}\r\n      }\r\n\r\n    async componentDidMount() {\r\n    const url = \"https://api.opendota.com/api/heroes/120/matches\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    console.log(data)\r\n    this.setState({loading: false})\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <h2>Glue</h2>\r\n            {this.state.loading ? <div>loading...</div> : <div><p>a</p></div>}\r\n          </div>\r\n        );\r\n      }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DoughnutExample from './doughnut';\nimport PangoStatsComponent from './pangostats'\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           test\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\nexport default class Dotawinloss extends React.Component {\n  // state = {\n  //   loading: true\n  // }\n\n  // async componentDidMount() {\n  //   const url = \"https://api.opendota.com/api/players/110767531/wl\";\n  //   const response = await fetch(url);\n  //   const data = await response.json();\n  //   dotaWin = data.win;\n  //   this.setState({loading: false});\n  //   return dotaWin;\n  // }\n\n  render() {\n    return <div>\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          test\n        </p>\n        {/* {this.state.loading ? <div>loading...</div> : <div>{dotaWin}</div>} */}\n      </header>\n        <hr />\n\t\t\t\t<DoughnutExample />\n        <hr />\n        <PangoStatsComponent />\n        <hr />\n    </div>\n\n      \n    </div>\n  }\n\n\n}\n\n\n//export default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n// var dotaPlaceholder = '???';\n// var siteDed = \"site's ded, F\";\n// var dotaWin;\n\n// function renderHtml(data) {\n//   return(<div>{data}</div>)\n// }\n\n// //https://api.opendota.com/api/players/110767531/wl\n// fetch('https://api.opendota.com/api/players/110767531/wl')\n// .then(response => response.json())\n// .then(\n//   testa => {\n//   displayData(testa);\n// })\n// .catch(error => \n//     {console.error(error)\n//     ReactDOM.render(renderHtml(siteDed), document.getElementById('page'));\n//              }) \n// function displayData(data) {\n//    dotaWin = data.win;\n//    ReactDOM.render(renderHtml(dotaWin), document.getElementById('page'));\n// }\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(renderHtml(dotaPlaceholder), document.getElementById('page'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}